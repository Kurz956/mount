services:
  nginx:
    image: nginx:latest
    container_name: nginx-server
    restart: always
    networks:
      - dbnet
    ports:
      - "80:8088"
    volumes:
      - ./Mountains/static:/app/www/mountains/static
      - ./Mountains/media:/app/www/mountains/media
      - ./Mountains/logs:/app/www/mountains/logs
      - ./nginx:/etc/nginx/conf.d
    depends_on:
      - mountains

  mountains:
    build: ./mountains
    image: mountains
    container_name: mountains
    restart: always
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
      if python manage.py shell -c 'from appmountain.models import Mountains; exit(0 if Mountains.objects.exists() else 1)'; then
          echo 'Database has mountains data, skipping fixture loading'
        else
          echo 'Loading initial data...'
          python manage.py loaddata /app/www/mountains/fixtures/db.json
        fi
             gunicorn -c gunicorn.py Mountains.wsgi"
    env_file:
      - .env
    environment:
      - DB_HOST=${DATABASE_HOST}
    networks:
      - dbnet
    links:
      - "postgres:dbps"
    volumes:
      - ./mountains:/app/www/mountains
    ports:
      - "8000:8000"
    depends_on:
      - postgres

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080"
    links:
      - "postgres:db"
    networks:
      - dbnet
    depends_on:
      - postgres

  postgres:
    image: postgres:17-alpine
    container_name: psgr
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - dbnet

networks:
  dbnet:
    driver: bridge

volumes:
  postgres-data: